# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
  boot.kernelModules = [
"kvm-amd"
"it87"
"zenpower"
"drivetemp"
"kvmfr"
 ];
 boot.initrd.kernelModules = [
  "vfio"
  "vfio_pci"
  "vfio_iommu_type1"
  "amdgpu"
];
boot.blacklistedKernelModules = [
  "nvidia"
  "nvidia_modeset"
  "nvidia_uvm"
  "nvidia_drm"
  "i2c_nvidia_gpu"
  "nvidia-gpu"
  "nouveau"
  "k10temp"
];

boot.extraModprobeConfig = ''
  options amdgpu ppfeaturemask=0xFFFFFFFF
  options vfio-pci ids=10de:2188,10de:1aeb,10de:1aec,10de:1aed
  options kvmfr static_size_mb=32
'';

boot.kernelParams = [
  "amd_iommu=on"
  "iommu=pt"
  "pcie_acs_override=downstream,multifunction"
  "pcie_port_pm=off"
  "split_lock_detect=off"
];

 boot.extraModulePackages = [
config.boot.kernelPackages.ddcci-driver
config.boot.kernelPackages.it87
config.boot.kernelPackages.zenpower
config.boot.kernelPackages.zenergy
config.boot.kernelPackages.kvmfr
];
 boot.kernelPackages = pkgs.linuxPackages_cachyos;

 boot.kernelPatches = [
  {
    name = "disable-it87";
    patch = ./disable-it87.patch;
  }
  {
    name = "disable-gpus";
    patch = ./disable-gpus.patch;
  }
];


  fileSystems."/" =
    { device = "/dev/disk/by-uuid/e625d2b3-8bdf-4e0a-9433-a794e244a7ae";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/5CB5-7DAF";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/eb2d40ec-fd65-48ba-a271-d99caaca162c";
      fsType = "ext4";
    };

  fileSystems."/mnt/nvme" =
    { device = "/dev/disk/by-uuid/46fc36ed-0ab2-44da-ba18-02ea90fb2c01";
      fsType = "ext4";
      options = [ "nosuid" "nodev" "nofail" "x-gvfs-show" ];
    };

fileSystems."/var/lib/flatpak" = {
  device = "/home/flatpak";
  fsType = "none";
  options = [ "bind" ];
};

    services.udev.extraRules = ''
    SUBSYSTEM=="kvmfr", OWNER="omarhanykasban", GROUP="kvm", MODE="0660"
    SUBSYSTEM=="usb", ATTR{idVendor}=="040b", ATTR{idProduct}=="0897", ACTION=="add", RUN+="/bin/sh -c 'amixer -c headset set PCM 100% && amixer -c headset set PCM,1 100% && amixer -c Headset set PCM 100% && amixer -c Headset set PCM,1 100%'"
  '';

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

environment.systemPackages = with pkgs; [
coolercontrol.coolercontrol-gui
coolercontrol.coolercontrold
coolercontrol.coolercontrol-liqctld
coolercontrol.coolercontrol-ui-data
lm_sensors
input-remapper
];
    programs.coolercontrol.enable = true;

services.xserver.config = ''
  Section "Monitor"
      Identifier "HDMI-0"
      Option "PreferredMode" "1920x1080"
      Option "Position" "0 768"
      Option "Primary" "true"
      Option "Rotate" "normal"
      Option "TargetRefresh" "60"
  EndSection

  Section "Monitor"
      Identifier "HDMI-1"
      Option "PreferredMode" "1366x768"
      Option "Position" "0 0"
      Option "Rotate" "normal"
      Option "TargetRefresh" "60"
  EndSection
'';

}
